Map
=====
It is not a child interface of Collection interface.

If we want to represent group of individual objects in key,value pair then we need to use Map interface.

Key can't be duplicated but value can be duplicated. 

Here key and value both must be objects.

Each key and value pair is called one entry.

Diagram: java35.1

HashMap
========
The underlying data structure is Hashtable.

Key can't be duplicated but value can be duplicated.

Insertion order is not preserved because it will take hash code of the key.

Hetrogeneous objects are allowed for both key and value.

Null insertion is possible for both key and value.

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		HashMap<String,String> hm=new HashMap<String,String>();
		hm.put("one","raja");
		hm.put("nine","nelson");
		hm.put("six","jose");
		hm.put("eight","Erick");
		System.out.println(hm);//{nine=nelson, six=jose, one=raja, eight=Erick}
		hm.put("one","jojo");
		System.out.println(hm);//{nine=nelson, six=jose, one=jojo, eight=Erick}
		hm.put(null,null);
		System.out.println(hm);//{null=null, nine=nelson, six=jose, one=jojo, eight=Erick}
	}
}

ex:
----
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		HashMap<String,String> hm=new HashMap<String,String>();
		hm.put("one","raja");
		hm.put("nine","nelson");
		hm.put("six","jose");
		hm.put("eight","Erick");
		
		Set s=hm.keySet();
		System.out.println(s);//[nine, six, one, eight]

		Collection c=hm.values();
		System.out.println(c);//[nelson, jose, raja, Erick]
		
		Set s1=hm.entrySet();
		System.out.println(s1);//[nine=nelson, six=jose, one=raja, eight=Erick]
	}
}

LinkedHashMap
===============
It is a child class of HashMap class.

LinkedHashMap is exactly same as HashMap class with following differences.

HashMap					LinkedHashMap
----------				------------
The underlying data structure is 	The underlying data structure is 
Hashtable.				Hashtable and LinkedList.

Insertion order is not preserved.	Insertion order is preserved.

Introduced in 1.2v.			Introduced in 1.4v.

ex:

import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		LinkedHashMap<String,String> lhm=new LinkedHashMap<String,String>();
		lhm.put("one","raja");
		lhm.put("nine","nelson");
		lhm.put("six","jose");
		lhm.put("eight","Erick");
		System.out.println(lhm);//{one=raja, nine=nelson, six=jose, eight=Erick}
		
	}
}

TreeMap
=======
The underlying datastructure is RED BLACK TREE.

Key can't be duplicated but value can be duplicated.

Insertion order is not preserved because it will take sorting order of the key.

If we depend upon default natural sorting order then key can be homogeneous and comparable.

If we depend upon customized sorting order then key can be hetrogeneous and non-comparable.

Key can't be null but value can be null.

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		TreeMap<Integer,String> tm=new TreeMap<Integer,String>();
		tm.put(10,"ten");
		tm.put(1,"one");
		tm.put(5,"five");
		tm.put(7,"seven");
		tm.put(3,"three");
		System.out.println(tm);//{1=one, 3=three, 5=five, 7=seven, 10=ten}
		tm.put(4,null);
		System.out.println(tm);//{1=one, 3=three, 4=null, 5=five, 7=seven, 10=ten}
		//tm.put(null,"nine");
		//System.out.println(tm);//R.E NullPointerException
		
	}
}

Hashtable
==========
The underlying datastructure is Hashtable.

Key can't be duplicated but value can be duplicated.

Insertion order is not preserved because it will take descending order of key.

Hetrogeneous objects are allowed for both key and value.

Key and value can't be null.

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		Hashtable<Integer,String> ht=new Hashtable<Integer,String>();
		ht.put(10,"ten");
		ht.put(1,"one");
		ht.put(5,"five");
		ht.put(7,"seven");
		ht.put(3,"three");
		System.out.println(ht);//{10=ten, 7=seven, 5=five, 3=three, 1=one}
		//ht.put(4,null);
		//System.out.println(ht);//R.E NullPointerException
		//ht.put(null,"four");
		//System.out.println(ht);//R.E NullPointerException
		
	}
}


Types of Cursors
=================
Cursor is used to read objects one by one from Collections.

We have three types of cursors in Java.

1)Enumeration 

2)Iterator 

3)ListIterator 

1)Enumeration 
--------------
It is used to read objects one by one from Legacy Collection objects.

We can create Enumeration object as follow.

ex:
	Enumeration e=v.elements();

Enumeration interface contains following two methods.
ex:
	public boolean hasMoreElements();
	public Object nextElement(); 

ex:
----
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		Vector v=new Vector();
		for(int i=1;i<=10;i++)
		{
			v.add(i);
		}
		System.out.println(v);//[1,2,3,4,5,6,7,8,9,10]

		Enumeration e=v.elements();
		while(e.hasMoreElements())
		{
			Integer i=(Integer)e.nextElement();
			System.out.println(i);
		}
	}
}
Limitations with Enumeration
----------------------------
Using Enumeration we can read objects one by one only from legacy Collection objects.Hence it is not a universal cursor.

Using Enumeration interface we can perform read operation but not remove operation.

To overcome this limitation we need to use Iterator interface.

2)Iterator
------------
It is used to read objects one by one from any Collection object.Hence it is a universal cursor.

Using Iterator interface we can perform read and remove operations.

We can create Iterator object as follow.
ex:
	Iterator itr=al.iterator();

Iterator interface contains following three methods.
ex:
	public boolean hasNext()
	public Object next()
	public void remove()

ex:
----
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		ArrayList al=new ArrayList();
		for(int i=1;i<=10;i++)
		{
			al.add(i);
		}
		System.out.println(al);//[1,2,3,4,5,6,7,8,9,10]

		Iterator itr=al.iterator();
		while(itr.hasNext())
		{
			Integer i=(Integer)itr.next();
			if(i%2==0)
			{
				itr.remove();
			}
		}
		System.out.println(al);//[1,3,5,7,9]

	}
}

Limitations with Iterator
-------------------------
> Using Enumeration and Iterator we can read objects only in forward   direction but not in backward direction.Hence they are not bi-directional      cursors.

> Using Iterator interface we can perform read and remove operation but 
  not adding and replacement of new objects.

> To overcome this limitation we need to use ListIterator interface.


3)ListIterator
--------------
It is a child interface of Iterator interface.

ListIterator is used to read objects only from List Collection objects.Hence it is a bi-directional cursor.

Using ListIterator we can perform read, remove, adding and replacement of new objects.

We can create ListIterator object as follow.

ex:
	ListIterator litr=al.listIterator(); 

ListIterator interface contains following nine methods.
ex:
	public boolean hasNext()
	public Object next()
	public boolean hasPrevious()
	public Object previous()
	public void add(Object o)
	public void set(Object o)
	public int nextIndex()
	public int previousIndex()

ex:
----
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		ArrayList al=new ArrayList();
		al.add("venki");
		al.add("chiru");
		al.add("bala");
		al.add("nag");
		System.out.println(al);//[venki,chiru,bala,nag]
		
		ListIterator litr=al.listIterator();
		while(litr.hasNext())
		{
			String s=(String)litr.next();
			System.out.println(s);
		}

	}
}

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		ArrayList al=new ArrayList();
		al.add("venki");
		al.add("chiru");
		al.add("bala");
		al.add("nag");
		System.out.println(al);//[venki,chiru,bala,nag]
		
		ListIterator litr=al.listIterator();
		while(litr.hasNext())
		{
			String s=(String)litr.next();
			if(s.equals("bala"))
			{
				litr.remove();
			}
		}
		System.out.println(al);//[venki,chiru,nag]

	}
}
ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		ArrayList al=new ArrayList();
		al.add("venki");
		al.add("chiru");
		al.add("bala");
		al.add("nag");
		System.out.println(al);//[venki,chiru,bala,nag]
		
		ListIterator litr=al.listIterator();
		while(litr.hasNext())
		{
			String s=(String)litr.next();
			if(s.equals("bala"))
			{
				litr.add("pavan");
			}
		}
		System.out.println(al);//[venki, chiru, bala, pavan, nag]

	}
}

ex:
----
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		ArrayList al=new ArrayList();
		al.add("venki");
		al.add("chiru");
		al.add("bala");
		al.add("nag");
		System.out.println(al);//[venki,chiru,bala,nag]
		
		ListIterator litr=al.listIterator();
		while(litr.hasNext())
		{
			String s=(String)litr.next();
			if(s.equals("bala"))
			{
				litr.set("Allu");
			}
		}
		System.out.println(al);//[venki, chiru, Allu, nag]

	}
}

Interview Questions
====================

Q)Write a java program to find out repeating words in a given string?

input:
	this is is java java class

output:
	this=1 , is=2 , java=2 , class=1

import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		String str="this is is java java class";

		LinkedHashMap<String,Integer> lhm=new LinkedHashMap<String,Integer>();

		String[] sarr=str.split(" ");

		for(String s:sarr)
		{
			if(lhm.get(s)!=null)
			{
				lhm.put(s,lhm.get(s)+1);
			}
			else
			{
				lhm.put(s,1);
			}
		}
		System.out.println(lhm);
	}
}

Q)Write a java program to find out repeating alphabets in a given string?

input:
	java

output:
	j=1,a=2,v=1

ex:


import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		String str="java";

		LinkedHashMap<Character,Integer> lhm=new LinkedHashMap<Character,Integer>();

		char[] carr=str.toCharArray();

		for(char c:carr)
		{
			if(lhm.get(c)!=null)
			{
				lhm.put(c,lhm.get(c)+1);
			}
			else
			{
				lhm.put(c,1);
			}
		}
		System.out.println(lhm);
	}
}

Q)Write a java program to check given string is balanced or not?

input:
	{[()]}

output:
	It is balanced string 

ex:
---

import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		String str="{[()]}";

		if(isBalanced(str))
			System.out.println("It is a balanced string");
		else
			System.out.println("It is not a balanced string");
	}
	//callie method
	public static  boolean isBalanced(String str)
	{
		Stack<Character> stack=new Stack<Character>();

		char[] carr=str.toCharArray();	

		for(char c:carr)
		{
			if(c=='{' || c=='[' || c=='(')
				stack.push(c);
			else if(c=='}' || !stack.isEmpty() || stack.peek()=='{')
				stack.pop();
			else if(c==']' || !stack.isEmpty() || stack.peek()=='[')
				stack.pop();
			else if(c==')' || !stack.isEmpty() || stack.peek()=='(')
				stack.pop();
			else
				return false;
		}

		return stack.isEmpty();
	}
}

https://engro.io/apply-freshers.html





























































































































































































































