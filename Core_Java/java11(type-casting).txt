Q)What is a java program to accept salary and find out 10% of TDS ?

import java.util.Scanner;
class Example9
{
	public static void main(String[] args) 
	{
		Scanner sc=new Scanner(System.in);
		
		System.out.println("Enter the salary :");
		int salary=sc.nextInt();

		//logic
		float tds=(float)salary*10/100;
		
		System.out.println("10 percent of TDS is ="+tds);

	}
}

Q)Write a java program to convert CGPA to percentage?

import java.util.Scanner;
class Example10
{
	public static void main(String[] args) 
	{
		Scanner sc=new Scanner(System.in);
		
		System.out.println("Enter the CGPA  :");
		float cgpa=sc.nextFloat();

		//logic
		float percentage=cgpa*9.5f;
		System.out.println("CGPA to percentage is ="+percentage);
	}
}

Assignment
===========
Q) Write a java program to find out area of a rectangle?

Q) Write a java program to find out area of a triangle?


Typecasting
============
The process of converting from one datatype to another datatype is called typecasting.

In java, typecasting can be performed in two ways.

1)Implicit typecasting 

2)Explicit typecasting 

1)Implicit typecasting 
-----------------------
If we want to store small value into a bigger variable then we need to use implicit typecasting.

A compiler is responsible to perform implicit typecasting.

There is no possibility to loss the information.

It is also known as widening or upcasting.

We can perform implicit typecasting as follow.

ex:
	byte	--->	short
				--->
					int  -->long -->float -->double
				--->
			char

ex:
----
class Test
{
	public static void main(String[] args) 
	{
		char  ch='a';

		long l=ch;

		System.out.println(l);//97
	}
}

ex:
---
class Test
{
	public static void main(String[] args) 
	{
		int i=10;

		double d=i;

		System.out.println(d); // 10.0
	}
}

ex:
----
class Test
{
	public static void main(String[] args) 
	{
		byte b=10;

		int i=b;

		System.out.println(i); // 10
	}
}

2)Explicit typecasting 
----------------------
If we want store big value into a smaller variable then we need to use explicit typecasting.

A programmer is responsible to perform explicit typecasting.

There is a possibility to loss the information.

It is also known as Narrowing or Downcasting.

We can perform explicit typecasting as follow.

ex:
	byte	<---	short
				<---
					int  <-- long <--float <--double
				<---
			char

ex:
----
class Test
{
	public static void main(String[] args) 
	{
		int i=65;

		char ch=(char)i;

		System.out.println(ch);//A 
	}
}

ex:
---
class Test
{
	public static void main(String[] args) 
	{
		float f=10.5f;

		int i=(int)f;

		System.out.println(i);//10
	}
}

ex:
---
class Test
{
	public static void main(String[] args) 
	{
		int i=130;

		byte b=(byte)i;

		System.out.println(b); // -126
	}
}

Java Source File Structure
===========================
case1:
-----
	A java program can have multiple classes.

	If a java program contains multiple classes then we need to check
	which class contains main method , that class will consider as 
	main class.
	ex:
		B.java
		-----------
		class A
		{
			-
		}
		class B 
		{
			public static void main(String[] args)
			{
				-
			}
		}
		If we compile above program we will get two .class files i.e 
		A.class and B.class. 	

case2:
------
	If a java program contains multiple classes with main method
	then we need to declare one class as public and that class will 
	consider as main class.
	ex:
		A.java
		-------
		public class A
		{
			public static void main(String[] args) 
			{
				System.out.println("A class"); 
			}
		}
		class B
		{
			public static void main(String[] args) 
			{
				System.out.println("B class"); 
			}
		}
		class C
		{
			public static void main(String[] args) 
			{
				System.out.println("C class"); 
			}
		}

		> javac   A.java  (A.class,B.class and C.class)
		> java  A (A class will execute)
                > java  B (B class will execute)
                > java  C (C class will execute )






	

















































