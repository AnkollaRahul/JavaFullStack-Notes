throw statement
===============
Sometimes we will create exception object explicitly and handover to JVM manually by using throw statement.

ex:
	throw new ArithmeticException("Don't divide by zeroo");

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		throw new ArithmeticException("don't divide by zero");
	}
}

throws statement
================
If any checked exception raised in our program so we must and should handle that exception by using try and catch block or by using throws statement.

ex:
----
class Test  
{
	public static void main(String[] args) 
	{
		try
		{
			Thread.sleep(3000);
			System.out.println("Welcome to Java");
		}
		catch (InterruptedException ie)
		{
			ie.printStackTrace();
		}
		
	}
}

ex:
---
class Test  
{
	public static void main(String[] args)throws InterruptedException 
	{
	
			Thread.sleep(5000);
			System.out.println("Welcome to Java");
	}
}

2)Userdefined exceptions
==========================
Exceptions which are created by the user based on the application requirement are called userdefined exceptions.
ex:
	NoInterestInPracticeException
	EnjoyingClassesWithMobileException 
	ACNotWorkingException
	TooYoungException
	TooOldException 
	and etc.

ex:
---
import java.util.Scanner;

class TooYoungException extends RuntimeException 
{
	TooYoungException(String s)
	{
		super(s);
	}
}
class TooOldException extends RuntimeException
{
	TooOldException(String s)
	{
		super(s);
	}
}
class Test
{
	public static void main(String[] args)
	{
		Scanner sc=new Scanner(System.in);
		System.out.println("Enter the age :");
		int age=sc.nextInt();
		if(age<18)
		throw new TooYoungException("U r not eligible to vote");
		else
			throw new TooOldException("U r eligible to vote");
	}
}

Generics
=========
Arrays are typesafe.

It means we can provide guarantee that what type of elements are present in arrays.

If requirement is there to store string values then it is recommanded to use String[] array.
ex:
	String[] sarr=new String[10];
	sarr[0]="hi";
	sarr[1]="hello";
	sarr[2]="bye";
	sarr[3]=10;   --> invalid 

At the time of retrieving the data from array we don't need to perform any typecasting.
ex:
	String[] sarr=new String[10];
	sarr[0]="hi";
	sarr[1]="hello";
	sarr[2]="bye";
	-
	-	
	String val=sarr[0];

Collections are not typesafe.

We can't give guarantee that what type of elements are present in Collections.

If requirement is there to store String values then it is never recommanded to use ArrayList because we won't get any compile time error or runtime error but sometimes our program will get failure.

ex:
	ArrayList al=new ArrayList();
	al.add("hi");
	al.add("hello");
	al.add("bye");
	al.add(10);

At the time of retrieving the data from Collections ,compulsary we need to perform typecasting.

ex:
	ArrayList al=new ArrayList();
	al.add("hi");
	al.add("hello");
	al.add("bye");
	al.add(10);	
	-
	-
	String val=(String)al.get(0);

To overcome above limitations Sun Micro System introduced Generics concept in 1.5 version.

The main objective of generics are.

1) To make Collections as typesafe.

2) To avoid typecasting problem. 



java.util package
==================

Q)What is the difference between Arrays and Collections ?

Arrays					Collections
--------				------------
It is a collection of homogeneous	It is a collection of homogeneous and 
data elements.				hetrogeneous data elements.

Arrays are fixed in size.		Collections are growable in nature.

Performance point of view arrays are 	Memory point of view Collections are 
recommanded to use.			recommanded to use.

It is typesafe.				It is not typesafe.

Arrays can hold primitive types and 	Collections can hold only object types
object types.

Arrays are not implemented based on 	Collections are implemented based on
data structure concept so we can't 	data structure concept so we can 
expect any ready made methods.For 	expect ready made methods.
every logic we need to write the 
code explicitly.


Collection
===========
Collection is an interface which is present in java.util package.

It is a root interface for entire Collection framework.

If we want to represent group of individual objects in a single entity then we need to use Collection interface.
	
Collection interface contains following methods which are applicable for entire Collection objects.

ex:
	cmd> javap   java.util.Collection 


  public abstract int size();
  public abstract boolean isEmpty();
  public abstract boolean contains(java.lang.Object);
  public abstract java.util.Iterator<E> iterator();
  public abstract java.lang.Object[] toArray();
  public abstract <T> T[] toArray(T[]);
  public abstract boolean add(E);
  public abstract boolean remove(java.lang.Object);
  public abstract boolean containsAll(java.util.Collection<?>);
  public abstract boolean addAll(java.util.Collection<? extends E>);
  public abstract boolean removeAll(java.util.Collection<?>);
  public boolean removeIf(java.util.function.Predicate<? super E>);
  public abstract boolean retainAll(java.util.Collection<?>);
  public abstract void clear();
  public abstract boolean equals(java.lang.Object);
  public abstract int hashCode();
  public java.util.Spliterator<E> spliterator();
  public java.util.stream.Stream<E> stream();
  public java.util.stream.Stream<E> parallelStream();


List
======
It is a child interface of Collection interface.

If we want to represent group of individual objects in a single entity where duplicate objects are allowed and order is preserved then we need to use List interface.

Diagram : java33.1


ArrayList
=========
The underlying data structure is resizable array or growable array.

Duplicate objects are allowed.

Insertion order is preserved.

Hetrogeneous objects are allowed.

Null insertion is possible.

It implements Serializable, Cloneable and RandomAccess interface.

If our frequent operation is a retrieval operation then ArrayList is best choice.

ex:
---
import java.util.*;
class Test
{
	public static void main(String[] args)
	{
		ArrayList al=new ArrayList();
		al.add("one");
		al.add("two");
		al.add("three");
		System.out.println(al);//[one,two,three]
		al.add("one");
		System.out.println(al);//[one,two,three,one]
		al.add(10);
		System.out.println(al);//[one,two,three,one,10]
		al.add(null);
		System.out.println(al);//[one,two,three,one,10,null]
	}
}

ex:
import java.util.*;
class Test
{
	public static void main(String[] args)
	{
		ArrayList<String> al=new ArrayList<String>();
		al.add("one");
		al.add("two");
		al.add("three");
		System.out.println(al);//[one,two,three]
		al.add("one");
		System.out.println(al);//[one,two,three,one]
		al.add(null);
		System.out.println(al);//[one,two,three,one,null]
	}
}

ex:
---
import java.util.*;
class Test
{
	public static void main(String[] args)
	{
		ArrayList<String> al=new ArrayList<String>();
		al.add("one");
		al.add("two");
		al.add("three");

		for(int i=0;i<al.size();i++)
		{
			String s=al.get(i);
			System.out.println(s);
		}
	}
}

ex:
----
import java.util.*;
class Test
{
	public static void main(String[] args)
	{
		ArrayList<String> al=new ArrayList<String>();
		al.add("one");
		al.add("two");
		al.add("three");

		System.out.println(al.isEmpty());//false 

		System.out.println(al.contains("one"));//true 

		al.remove("one");
		System.out.println(al);//[two,three]

		al.clear();
		System.out.println(al);//[]
	}
}

ex:
----
import java.util.*;
class Test
{
	public static void main(String[] args)
	{
		List<String> list=new ArrayList<String>();
		list.add("one");
		list.add("two");
		list.add("three");
		System.out.println(list);//[one,two,three]
	}
}

ex:
---
import java.util.*;
class Test
{
	public static void main(String[] args)
	{
		List<String> list=new ArrayList<String>();
		list.add(new String("one"));
		list.add(new String("two"));
		list.add(new String("three"));
		System.out.println(list);//[one,two,three]
	}
}

ex:
---
import java.util.*;
class Test
{
	public static void main(String[] args)
	{
		List<String> l=Arrays.asList("one","two","three","four");
		System.out.println(l);
	}
}

















































			











































































