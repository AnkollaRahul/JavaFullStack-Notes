Q)Write a java program to display the string below format?

input:
	A1B2C3D4

output:
	ABBCCCDDDD

ex:

class Test  
{
	public static void main(String[] args) 
	{
		String str="A1B2C3D4";

		for(int i=0;i<str.length();i++)
		{
			if(Character.isAlphabetic(str.charAt(i)))
			{
				System.out.print(str.charAt(i));  
			}
			else
			{
				int a=Character.getNumericValue(str.charAt(i)); // 1 2 3 4 

				for(int j=1;j<a;j++)
				{
					System.out.print(str.charAt(i-1));
				}
			}
		}
	}
}

Q)Write a java program to find most repeating character in a given string?

input:
	googleformat

output:
	o is repeating for 3 times 

ex:

class Test  
{
	public static void main(String[] args) 
	{
		String str="googleformat";

		int maxCount=0;

		char element=' ';

		for(int i=0;i<str.length();i++)
		{
			int cnt=0;

			for(int j=0;j<str.length();j++)
			{
				if(str.charAt(i)==str.charAt(j))
				{
					cnt++;
				}
			}

			if(maxCount<cnt)
			{
				maxCount=cnt;
				element=str.charAt(i);
			}
		}
		System.out.println(element+" is repeating for "+maxCount+" times");
		
	}
}

Q)Write a java program to perform right rotation of a string?

input:
	str = "ihubtalent";

	cnt = 2; 

output:
	ubtalentih

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		String str="ihubtalent";
		int cnt=2;
		char[] carr=str.toCharArray();	// i  h  u  b  t  a  l  e  n t
		
		String str1=str.substring(cnt,carr.length); //ubtalent 

		String str2=str.substring(0,cnt);//ih

		System.out.println(str1+str2);//ubtalentih
	
	}
}


Q)Write a java program to find out left rotation of a string?

input:
	str="ihubtalent"
	cnt=2; 

output:
	ntihubtale


ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		String str="ihubtalent";
		int cnt=2;
		char[] carr=str.toCharArray();	// i  h  u  b  t  a  l  e  n t


		String str1=str.substring(0,carr.length-cnt);//ihubtale
		
		String str2=str.substring(carr.length-cnt,carr.length);//nt 


		System.out.println(str2+str1);
	}
}


Q)Write a java program to display the string starting with vowels?

input:
	this is java class for you in a coming batch 

output:
	is in a 


class Test  
{
	public static void main(String[] args) 
	{
		String str="this is java class for you in a coming batch";

		String[] sarr=str.split(" ");

		String result="";

		for(String s:sarr)
		{
			if(s.charAt(0)=='a' ||  s.charAt(0)=='e' ||  s.charAt(0)=='i' ||  s.charAt(0)=='o' ||  s.charAt(0)=='u')
			{
				result+=s+" ";
			}
		}
		System.out.println(result);
	}
}


Assignments
============
Q)Write a java program to display given string in below format?

input:
	ABBCCCDDDD

output:
	A1B2C3D4

Q)Write a java program to display permutation of string?

input:
	ABC

output:
	ABC 
	ACB 
	BAC 
	BCA 
	CAB 
	CBA





StringBuffer
=============
If our content change frequently then it is never recommanded to use String object because for every change a new object will be created.

To overcome this limitation Sun Micro System introduced StringBuffer object.

In StringBuffer object all the required changes will be done in a single object only and it is mutable object.

constructor
------------
1) StringBuffer sb=new StringBuffer()
--------------------------------------
It will create empty StringBuffer object with default initial capacity of 16.

If capacity reaches to maximum capacity then new capacity will be created with below formulea.
exx:
	new capacity = current_capacity+1*2;

ex:

class Test  
{
	public static void main(String[] args) 
	{
		StringBuffer sb=new StringBuffer();
		
		System.out.println(sb.capacity());//16

		sb.append("abcdefgjijklmnop");

		System.out.println(sb.capacity());//16

		sb.append("qr"); // 16+1*2=34

		System.out.println(sb.capacity());//34
	
	}
}

2) StringBuffer sb=new StringBuffer(int initialcapacity)
-----------------------------------------------------
It will create StringBuffer with specified initial capacity.

ex:

class Test  
{
	public static void main(String[] args) 
	{
		StringBuffer sb=new StringBuffer(19);
		
		System.out.println(sb.capacity());//19

	
	}
}

3)StringBuffer sb=new StringBuffer(String str)
-----------------------------------------------
It will create StringBuffer object which is equivalent to String.

Here capacity will be created with below formulea.

ex:
	capacity = s.length+16;

ex:

class Test  
{
	public static void main(String[] args) 
	{
		StringBuffer sb=new StringBuffer("bhaskar");
		
		System.out.println(sb.capacity());//7+16=23	
	}
}

Q)Write a java program to display reverse of a string?

input:
	hello
output:
	olleh 

ex:

class Test  
{
	public static void main(String[] args) 
	{
		String str="hello";

		String rev="";

		StringBuffer sb=new StringBuffer(str);

		rev=sb.reverse().toString();

		System.out.println(rev);
	}
}


Q)Write a java program to check given string is palindrome or not?

class Test  
{
	public static void main(String[] args) 
	{
		String str="madam";

		String rev="";

		StringBuffer sb=new StringBuffer(str);

		rev=sb.reverse().toString();

		if(str.equals(rev))
			System.out.println("It is palindrome string");
		else
			System.out.println("It is not palindrome string");
	}
}

StringBuilder
==============
StringBuilder is exactly the same as StringBuffer with following differences.

StringBuffer				StringBuilder
------------				---------------
All the methods present in StringBuffer	No method present in StringBuilder 
are synchronized.			is synchronized.

At a time only one thread is allowed 	Multiple threads are allowed to 
to execute.Hence we can achieve 	execute.Hence we can't achieve 
thread safety.				thread safety.

Waiting time of a thread will increase	There is no waiting time of a thread
effectively performance is low.		effectively performance is high.

It is introduced in 1.0v.		It is introduced in 1.5v.


StringTokenizer
===============
A StringTokenizer is a class which is present in java.util package.

It is used to tokenize the string irrespective of regular expression.

We can create StringTokenizer object as follow.

syntax:
	StringTokenizer st=new StringTokenizer(String,RegEx);

StringTokenizer class contains following methods.
ex:
	public boolean hasMoreTokens()
	public String nextToken()
	public boolean hasMoreElements()
	public Object nextElement()
	public int countTokens()

ex:
---
import java.util.StringTokenizer;
class Test  
{
	public static void main(String[] args) 
	{
		StringTokenizer st=new StringTokenizer("this is java class");

		System.out.println(st.countTokens());//4
	}
}
Note: Here default regular expression is space.

ex:
---
import java.util.StringTokenizer;
class Test  
{
	public static void main(String[] args) 
	{
		StringTokenizer st=new StringTokenizer("this is java class"," ");

		System.out.println(st.countTokens());//4
	}
}

ex:
----
import java.util.StringTokenizer;
class Test  
{
	public static void main(String[] args) 
	{
		StringTokenizer st=new StringTokenizer("this is java class"," ");

		while(st.hasMoreTokens())
		{
			String s=st.nextToken();
			System.out.println(s);
		}
	}
}

ex:
----
import java.util.StringTokenizer;
class Test  
{
	public static void main(String[] args) 
	{
		StringTokenizer st=new StringTokenizer("this is java class"," ");

		while(st.hasMoreElements())
		{
			String s=(String)st.nextElement();
			System.out.println(s);
		}
	}
}

ex:
---
import java.util.StringTokenizer;
class Test  
{
	public static void main(String[] args) 
	{
		StringTokenizer st=new StringTokenizer("9,99,999",",");

		while(st.hasMoreElements())
		{
			String s=(String)st.nextElement();
			System.out.println(s);
		}
	}
}









































































































































