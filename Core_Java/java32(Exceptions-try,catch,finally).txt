Exception Handling
==================

Q)What is the difference between Exception and Error?

Exception
---------
Exception is a problem for which we can provide solution programmatically.

Exception will raise due to syntax error.

ex:
	FileNotFoundException 
	ArithmeticException 
	IllegalArgumentException 	


Error
------
Error is a problem for which we can't provide solution programmatically.

Error will raise due to lack of system resources.

ex:
	OutOfMemoryError 
	LinkageError 
	StackOverFlowError
	and etc
	
As a part of java application development, it is a responsibility of a programmer to provide smooth termination for every java program.

We have two types of terminations.

1)Smooth termination  / graceful termination 

2)Abnormal termination 

1)Smooth termination 
--------------------
During the program execution suppose if we are not getting any interruption in the middle of the program such type of termination is called smooth termination.

2)Abnormal termination
-----------------------
During the program execution suppose if we are getting any interruption in the middle of the program such type of termination is called abnormal termination 

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		System.out.println(10/0);
	}
}

If any exception raised in our program , we must and should handle that exception otherwise our program will terminates abnormally.

Exception will display name of the exception ,description of the exception and line number of the exception.

Exception
===========
It is a unwanted, unexpected event which disturbs normal flow of our program.

Exceptions always raised at runtime so they are also known as runtime events.

The main objective of exception handing is to provide graceful termination.

In java, exceptions are divided into two types.

1)Predefined exception 

2)Userdefined exceptions 


1)Predefined exception 
-----------------------
Built-In exceptions are called predefined exceptions.

It classified into two types.

i)Checked exceptions 

ii)Unchecked exceptions 

i)Checked exceptions 
--------------------
Exceptions which are checked by the compiler at the time of compilation are called checked exceptions.
ex:
	InterruptException
	IOException	
	EOFException 
	and etc.

ii)Unchecked exceptions 
--------------------------
Exceptions which are checked by the JVM at the time of runtime are called 
unchecked exceptions.
ex:
	ArithmeticException 
	IllegalArgumentException
	ClassCastException 
	and etc.

Diagram: java32.1		

If any checked exception raised in our program , we must and should handle that exception by using try and catch block.

try block
=========
It is a block which contains risky code.

A try block associate with catch block.

If any exception raised in try block then it won't be executed.

A try block is used to throw the exception to catch block.


catch block
===========
It is a block which contains Error Handling Code.

A catch block always associate with try block.

A catch block will take exception name as a parameter and that name must match with exception class name.

If there is no exception in try block then catch block won't be executed.

A catch block is used to catch the exception which is thrown by try block.


syntax:
-------
	try
	{
		-
		- //Risky Code 
		-
	}
	catch(ArithmeticException ae)
	{
		-
		- //Error Handling Code
		-
	}


ex:
----
class Test  
{
	public static void main(String[] args) 
	{
		try
		{
			System.out.println("try-block");
		}
		catch (Exception e)
		{
			System.out.println("catch-block");
		}
	}
}
o/p:
	try-block


ex:
----
class Test  
{
	public static void main(String[] args) 
	{
		try
		{
			System.out.println(10/0);
		}
		catch (ArithmeticException ae)
		{
			System.out.println("catch-block");
		}
	}
}

o/p:
	catch-block

ex:
----
class Test  
{
	public static void main(String[] args) 
	{
		try
		{
			System.out.println("stmt1");
			System.out.println(10/0);
			System.out.println("stmt2");
		}
		catch (ArithmeticException ae)
		{
			System.out.println("catch-block");
		}
	}
}
o/p:
	stmt1
	catch-block

A try with multiple catch blocks
=================================
A try block can have multiple catch blocks.

If a try block contains multiple catch block then order of catch block is very important ,it should be from child to parent but not from parent to child.

ex:

class Test  
{
	public static void main(String[] args) 
	{
		try
		{
			System.out.println(10/0);
		}
		catch (ArithmeticException ae)
		{
			System.out.println("From AE");
		}
		catch (RuntimeException re)
		{
			System.out.println("From RE");
		}
		catch (Exception e)
		{
			System.out.println("From E");
		}
	}
}

Various ways to display exception details
=======================================
Throwable class defined following three methods to display exception details.

1)printStackTrace()
-------------------
It will display name of the exception, description of the exception and line number of the exception.

2)toString()
-----------
It will display name of the exception and description of the exception.


3)getMessage()
----------------
It will display description of the exception.

class Test  
{
	public static void main(String[] args) 
	{
		try
		{
			System.out.println(10/0);
		}
		catch (ArithmeticException ae)
		{
			ae.printStackTrace();

			System.out.println("============================");

			System.out.println(ae.toString());

			System.out.println("============================");

			System.out.println(ae.getMessage());
		}
	}
}

A single catch block can handle multiple exceptions.

ex:
class Test  
{
	public static void main(String[] args) 
	{
		try
		{
			System.out.println(10/0);
		}
		catch (ArithmeticException | ClassCastException | IllegalArgumentException e)
		{
			e.printStackTrace();
		}
	}
}

finally block
===============
It is never recommanded to maintain cleanup code in try block because if any exception raised in try block then it won't be executed.

It is never recommanded to maintain cleanup code in catch block because if no exception raised in try block then catch block won't be executed. 

We need a place where we can maintain cleanup code and it will execute irrespective of exception raised or not.Such block is called finally block.

A finally block always associate with try and catch block.

syntax:
-------
	try
	{
		-
		- //Risky Code 
		-
	}
	catch(ArithmeticException ae)
	{
		-
		- //Error Handling Code
		-
	}
	finally
	{
		-
		- //Cleanup Code 
		-
	}

ex:
---
class Test  
{
	public static void main(String[] args) 
	{
		try
		{
			System.out.println("try-block");
		}
		catch (ArithmeticException ae)
		{
			ae.printStackTrace();
		}
		finally
		{
			System.out.println("finally-block");
		}
	}
}
o/p:
	try-block
	finally-block

ex:
----
class Test  
{
	public static void main(String[] args) 
	{
		try
		{
			System.out.println(10/0);
		}
		catch (ArithmeticException ae)
		{
			ae.printStackTrace();
		}
		finally
		{
			System.out.println("finally-block");
		}
	}
}
o/p:
	java.lang.ArithmeticException: / by zero
        at Test.main(Test.java:7)
        finally-block	

ex:
---
import java.io.*;
class Test  
{
	public static void main(String[] args)
	{
		FileWriter fw=null;

		try
		{
			fw=new FileWriter("xyz.txt");
			fw.write(98);//b
			fw.write("\n");
			char[] carr={'a','b','c'};
			fw.write(carr);
			fw.flush();
		}
		catch (IOException ioe)
		{
			ioe.printStackTrace();
		}
		finally
		{
			System.out.println("Please check the location");
			
			try
			{
				fw.close();
			}
			catch (IOException ioe)
			{
				ioe.printStackTrace();
			}
		}
	}
}

A try with finally combination is valid in java.

ex:

class Test  
{
	public static void main(String[] args)
	{
		try
		{
			System.out.println("try-block");
		}
		finally
		{
			System.out.println("finally-block");
		}
	}
}

Q)What is the difference between final, finally and finalized method?

final
-----
A final is a modifier which is applicable for variables,methods and classes.

If we declare any variable as final then reassignment of that variable is not possible.

If we declare any method as final then overriding of that method is not possible.

If we declare any class as  final then creating child class is not possible.

finally
-------
It is a block which contains cleanup code and it will execute irrespective of exception raised or not.

finalized method
---------------
It is a method called by garbage collector just before destroying an object for cleanup activity.




































































































































