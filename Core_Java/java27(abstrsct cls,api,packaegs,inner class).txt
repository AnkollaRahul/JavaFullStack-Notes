Abstract classes
================
Abstract class is a collection of zero or more abstract methods and concrete methods.

A abstract keyword is applicable for methods and classes but not for variables.

It is not possible to create object for abstract class.

To write the implementation of abstract methods of a abstract class we will use sub classes.

By default every abstract method is a public and abstract.

Abstract class contains only instance variables.

syntax:
-------
	abstract class class_name
	{
		-
		- // instance variables
		- // abstract methods
		- // concrete methods 
		-
	}

If we know partial implementation then we need to use Abstract class.

ex:
---
abstract class Plan
{
	//instance variable
	protected double rate;

	//abstract method
	public abstract void getRate();

	//concrete method 
	public void calculateBillAmt(int units)
	{
		System.out.println("Total Units :"+units);
		System.out.println("Total Bill :"+ rate*units);
	}
}
class DomesticPlan extends Plan
{
	public void getRate()
	{
		rate=2.5d;
	}
}
class CommercialPlan extends Plan 
{
	public void getRate()
	{
		rate=5.0d;
	}
}
class Test  
{
	public static void main(String[] args) 
	{
		DomesticPlan dp=new DomesticPlan();
		dp.getRate();
		dp.calculateBillAmt(250);

		CommercialPlan cp=new CommercialPlan();
		cp.getRate();
		cp.calculateBillAmt(250);
	}
}


Q)What is the difference between interface and abstract class?

interface				abstract class
-------------				---------------
To declare interface we will use 	To declare abstract class we wil use
interface keyword.			abstract keyword.

Interface is a collection of abstract	It is a collection of abstract methods
methods,default methods and static 	and concrete methods.
methods.

It does not allow constructor.		It allows constructor.

It does not allow blocks.		It allows blocks.

To write the implementation of 		To write the implementation of 
abstract methods we will use 		abstract methods we will use sub 
implementation class.			classes.

It contains only constants.		It contains only instance variables.

Multiple inheritence is possible.	Multiple inheritance is not possible.	

If we know only specification then we 	If we know partial implementation
need to use interface.			then we need to use abstract class.


API
====
API stands for Application Programming Interface.

It is a base for the programmer to develop software applications.

API is a collection of packages.

We have three types of API's.

1)Predefined API 
----------------
	Built-In API is called predefined API.
	ex:
		https://docs.oracle.com/javase/8/docs/api/

2)Userdefined API 
------------------
	API which is created by the user based on the application requirement.

3)Third party API 
-------------------
	API which is given by third party vendor.
	ex:
		JAVAZOOM API
		iText API 
		and etc.

Packages
========
Package is a collection of classes ,interfaces , enums and Annotations.

Here enum is a special class and Annotation is a special interface.

In general, a package is a collection of classes and interfaces.

Package is a also known as folder or a directory.

In java, we have two types of packages.

1)Predefined packages 

2)Userdefined packages

1)Predefined packages 
---------------------
Built-In packages are called predefined packages.
ex:
	java.lang
	java.io
	java.util
	java.text
	java.util.stream
	java.sql
	javax.servlet 
	and etc.

2)Userdefined packages
---------------------
Packages which are created by the user based on the application requirement are called userdefined packages.

We can declare userdefined package as follow.

syntax:
------
	package  <package_name>;

ex:
---
package com.ihub.www;
import java.util.Calendar;
class Test
{
	public static void main(String[] args)
	{
		Calendar c=Calendar.getInstance();
		
		//convert time to 24 hours
		int h=c.get(Calendar.HOUR_OF_DAY);
		if(h<12)
			System.out.println("Good Morning");
		else if(h<16)
			System.out.println("Good Afternoon");
		else if(h<20)
			System.out.println("Good Evening");
		else
			System.out.println("Good Night");
	}
}

We can compile the code by using below command.
ex:
			current directory 
				 |
	javaprog>  javac   -d    .    Test.java 
			    |
			destination
			folder 	


We can run the code by using below command.
ex:
	javaprog>  java   com.ihub.www.Test  
				|	  |
				pkg name  classname 


Singleton class
================
A class which allows us to create only one object is called singleton class.

Using a class if we call any method and that method returns same class object is called singleton class.

We have following list of singleton class.
ex:
	Calendar
	LocalTime
	LocalDate 
	and etc.

To create our own singleton class we need to use private constructor and factory method.

ex:
-----
class Singleton
{
	static Singleton singleton=null;

	//private constructor
	private Singleton()
	{

	}
	//factory method
	public static Singleton getInstance()
	{
		if(singleton==null)
		{
			singleton=new Singleton();
		}
		return singleton;
	}
}
class Test
{
	public static void main(String[] args)
	{
		Singleton s1=Singleton.getInstance();
		System.out.println(s1.hashCode());

		Singleton s2=Singleton.getInstance();
		System.out.println(s2.hashCode());
	}
}


Inner classes
=============
Sometimes we will declare a class inside another class such concept is called inner class.

ex:
	class  <Outer_Class>
	{
		class <Inner_Class>
		{
			-
			- //code to be declare 
			-
		}
	}

Inner classes introduced as a part of event handling to remove GUI bugs.

Because of powerful features and benefits of inner classes, programmer started to use inner class in our regular programming.

In inner class , we can't declare static members.


Accessing inner class data from static area of outer class
---------------------------------------------------------
class Outer
{
	class Inner
	{
		public void m1()
		{
			System.out.println("M1-Method");
		}
	}
	public static void main(String[] args)
	{
		Outer.Inner i=new Outer().new Inner();
		i.m1();
	}
}

Note: 
-----
If we compile above program we will get two .class files i.e
Outer.class and Outer$Inner.class


ex:
---
class Outer
{
	class Inner
	{
		public void m1()
		{
			System.out.println("M1-Method");
		}
	}
	public static void main(String[] args)
	{
		new Outer().new Inner().m1();
	}
}

Accessing inner class data from non-static area of outer class
--------------------------------------------------------------
class Outer
{
	class Inner
	{
		public void m1()
		{
			System.out.println("M1-Method");
		}
	}
	public void m2()
	{
		Inner i=new Inner();
		i.m1();
	}
	public static void main(String[] args)
	{	
		Outer o=new Outer();
		o.m2();
	}
}




























































































 


































