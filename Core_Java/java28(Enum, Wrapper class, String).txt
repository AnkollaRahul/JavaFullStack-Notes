Enum
======
Enum is a group of named constants.

Enum concept introduced in 1.5v.

Using enum we can create our own datatype called enumerated datatype.

When compare to old language enum , java enum is more powerful.

syntax:
-------
	enum type_name
	{
		val1,val2,..valN
	}
ex:
---
	enum  Months
	{
		JAN,FEB,MAR
	}

Internal implementation of enum
===============================
Every enum internally implements as final class concept and extends with java.lang.Enum class.

Every enum constant is a reference variable of enum type.

ex:


enum Months		public final class Months extends java.lang.Enum 	
{			{
	JAN,FEB,MAR  => 	public static final Months JAN=new Months();
}				public static final Months FEB=new Months();
				public static final Months MAR=new Months();
			}

Declaration and Usage of enum
--------------------------------
enum Months
{
	JAN,FEB,MAR
}

class Test  
{
	public static void main(String[] args) 
	{
		Months m=Months.JAN;
		System.out.println(m);//JAN
	}
}

ex:
---
enum Months
{
	JAN,FEB,MAR
}

class Test  
{
	public static void main(String[] args) 
	{
		Months m=Months.FEB;
		switch(m)
		{
			case JAN: System.out.println("January"); break;
			case FEB: System.out.println("February"); break;
			case MAR: System.out.println("March"); break;
		}
	}
}

java.lang.Enum class
---------------------
Power to enum will be inherited from java.lang.Enum class.

It contains following two methods.

1)values()
-----------
	It is a static method which returns group of constants from enum.

2)ordinal()
----------
	It returns ordinal number of enum.

ex:
---
enum Week
{
	MON,TUE,WED,THU,FRI,SAT,SUN
}

class Test  
{
	public static void main(String[] args) 
	{
		Week[] w=Week.values();	

		//for each loop
		for(Week w1:w)
		{
			System.out.println(w1+" ------------ "+w1.ordinal());
		}
	}
}

When compare to old language enum , java enum is more powerful because in addition to constants we can declare variables, constructors and methods.

ex:
---
enum Cloths
{
	SILK,KHADI,COTTON;

	Cloths()
	{
		System.out.println("constructor");
	}
}

class Test  
{
	public static void main(String[] args) 
	{
		Cloths c=Cloths.SILK;
	}
}

ex:
----
enum Cloths
{
	SILK,KHADI,COTTON;

	static int i=10;

	public static void main(String[] args) 
	{
		System.out.println(i);//10
	}
}


Wrapper classes
===============
The main objective of wrapper classes are

1) To wrap primitive type to wrapper object and vice versa.

2) To defined several utility methods.

Primitive type			Wrapper class
----------------		--------------
byte 				Byte
short				Short
int 				Integer
long				Long
float				Float
double				Double
boolean				Boolean
char 				Character 

constructor
------------
Every wrapper class contains two constructors.One will take corresponding primitive as an argument and another will take corresponding String as an argument.

ex:

Wrapper class			constructor
------------			-----------
Byte				byte or String 
Short				short or String
Integer				int or String 
Long				long or String 
Float				float or String 
Double				double or String
Boolean				boolean or String 
Character 			char 

ex:
----
class Test 
{
	public static void main(String[] args)
	{
		Integer i1=new Integer(10);
		System.out.println(i1);//10

		Integer i2=new Integer("20");
		System.out.println(i2);//20
	}
}

ex:
---
class Test 
{
	public static void main(String[] args)
	{
		Boolean b1=new Boolean(true);
		System.out.println(b1);//true

		Boolean b2=new Boolean("false");
		System.out.println(b2);//false 
	}
}

ex:
---
class Test 
{
	public static void main(String[] args)
	{
		Character c=new Character('a');
		System.out.println(c); //a 
	}
}

Utility methods
================

1) valueOf()
------------
It is similar to constructor.
It is used to convert primitive type to wrapper object.

ex:

class Test 
{
	public static void main(String[] args)
	{
		Integer i1=Integer.valueOf(10);
		System.out.println(i1);//10

		Long l1=Long.valueOf("20");
		System.out.println(l1);//20
	}
}



2) xxxValue()
--------------
It will convert wrapper object to primitive type.

ex:
class Test 
{
	public static void main(String[] args)
	{
		Integer i=new Integer(10);

		byte b=i.byteValue();
		System.out.println(b);
		
		short s=i.shortValue();
		System.out.println(s);
	}
}

3) parseXxx()
---------------
It is used to convert string type to primitive type.

ex:

class Test 
{
	public static void main(String[] args)
	{
		String str="100";

		int i=Integer.parseInt(str);
		System.out.println(i); //100

		long l=Long.parseLong(str);
		System.out.println(l); //100

		float f=Float.parseFloat(str);
		System.out.println(f); //100.0
	}
}

4) toString() 
--------------
It is used to convert wrapper object type to String type.
ex:

class Test 
{
	public static void main(String[] args)
	{
		Integer i1=new Integer(10);
		
		String s=i1.toString();

		System.out.println(s);
	}
}

Q)Write a java program to perform sum of two binary numbers?

input:
	1010
	0101
output:
	1111

ex:

import java.util.Scanner;
class Test 
{
	public static void main(String[] args)
	{
		Scanner sc=new Scanner(System.in);

		System.out.println("Enter the first binary number :");
		String binary1=sc.next(); //1010

		System.out.println("Enter the second binary number :");
		String binary2=sc.next(); //0101

		//converting binary to decimal 
		int a=Integer.parseInt(binary1,2);
		int b=Integer.parseInt(binary2,2);

		int c=a+b;

		//converting decimal to binary 
		String result=Integer.toBinaryString(c);
		System.out.println("sum of two binary numbers is ="+result);
	}
}


Q)Types of objects in java?

We have two types of objects in java.

1)Immutable object 

2)Mutable object 

1)Immutable object 
--------------------
After object creation if we perform any changes then for every change a new object will be created such type of object is called immutable object.
ex:
	String and Wrapper classes 

2)Mutable object 
---------------
After object creation if we perform any changes then all the required changes will be done in a same object such type of object is called mutable object.
ex:
	StringBuffer and StringBuilder 

String
=======
String is a set of characters which is enclosed in a double quotation.

String is a immutable object.

case1:
------
After object creation we can't perform any changes.If we perform any changes then for every change a new object will be created such behaviour is called immutability of an object.
ex:
	String s=new String("bhaskar");
	s.concat("solution");
	System.out.println(s); // bhaskar

Diagram: java28.1

case2:
------
Q)What is the difference between == and .equals() method?

==
----
It is a equality operator or comparision operator which always returns boolean value.

It is used to reference comparision or address comparision.

ex:
class Test
{
	public static void main(String[] args)
	{
		String s1=new String("bhaskar");
		String s2=new String("bhaskar");

		System.out.println(s1==s2);//false 
	}
}

.equals()
---------
It is a method present in String class which always returns boolean value.

It is used for content comparision which is case sensitive.

ex:
class Test
{
	public static void main(String[] args)
	{
		String s1=new String("bhaskar");
		String s2=new String("bhaskar");

		System.out.println(s1.equals(s2));//true 
	}
}

case3:
-----
Once if we create a String object, two objects will be created.One is on heap
and another is on SCP (String Constant Pool) area.But 's' always points to heap area only.

Diagram: java28.2

Object creation in SCP area is always optional.First JVM Will check is there any object is created with same content or not.If it is created then JVM simply refers to that object.If it is not created then JVM will create a new object.HEnce there is no chance of having duplicate objects in SCP area.

Even though SCP object do not have any reference, Garbage collector can't access them.

SCP objects will destroy when JVM shutdowns or terminated.






























































































































































