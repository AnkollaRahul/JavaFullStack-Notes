Servlet Life cycle methods
=========================
We have three life cycle methods in servlets.

1) public void init(ServletConfig config)throws ServletException 
-----------------------------------------
		It is used for instantiation event.
		This method will execute just before servlet object creation.


2) public void service(ServletRequest req,ServletResponse res)throws ServletException,IOException 
-----------------------------------------
	It is used for request arrival event.
	This method will execute when request goes to servlet program.

3) public void destroy() 
--------------------------
	It is used for destruction event.
	This method will execute just before servlet object destruction.


Deployment Directory structure
-------------------------------
LifeCycleApp
|
|----Java Resources
|		|
		|----src
				|
				|----com.ihub.www
							|
							|-----TestSrv.java
|
|----Web Content
		|
		|---index.html
		|
		|-----WEB-INF
					|
					|-----web.xml 

Note:
------
In above application we need to add "servlet-api.jar" file in project build path.

index.html
---------
<center>
	<h1>
		<a href="test"> click Here  </a>	
	</h1>
</center>

web.xml
------
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" id="WebApp_ID" version="3.0">
  
  <servlet>
  	<servlet-name>TestSrv</servlet-name>
  	<servlet-class>com.ihub.www.TestSrv</servlet-class>
  </servlet>
  <servlet-mapping>
  	<servlet-name>TestSrv</servlet-name>
  	<url-pattern>/test</url-pattern>
  </servlet-mapping>
  
  <welcome-file-list>
  	<welcome-file>index.html</welcome-file>
  </welcome-file-list>
  
</web-app>

TestSrv.java
------------
package com.ihub.www;

import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.http.HttpServlet;

public class TestSrv extends HttpServlet 
{
		public void init(ServletConfig config)throws ServletException
		{
			System.out.println("init-method");
		}
		
		public void service(ServletRequest req,ServletResponse res)throws ServletException,IOException
		{
				PrintWriter pw=res.getWriter();
				res.setContentType("text/html");
				
				pw.println("<center>Service method is called</center>");
				pw.close();
				System.out.println("service-method");
		}
		public void destroy()
		{
			System.out.println("destroy-method");
		}
}


Request url
-------------
	http://localhost:2525/LifeCycleApp/test	


ServletConfig object
=====================
ServletConfig is an interface which is present in javax.servlet package.

ServletConfig object is created by the web container for every servlet.

Servletconfig object is used to read configuration information from web.xml file.

We can create ServletCofig object as follow.
ex:
		ServletConfig config=getServletConfig();

ServletConfig interface contains following four methods.

1)public String getInitParameter(String name);
-------------------------------------
	It will return parameter value based on specified parameter name.

2)public Enumeration getInitParameterNames();
-----------------------------------------------------
	It will return enumeration of all initialized parameter names.

3)public ServletContext getServletContext();
-------------------------------------------------------
	It will return ServletContext object.

4)public String getServletName();
-----------------------------------------------	
	It will return Servlet name.



Deployment Directory structure
-------------------------------
ConfigApp
|
|----Java Resources
|		|
		|----src
				|
				|----com.ihub.www
							|
							|-----TestSrv.java
|
|----Web Content
		|
		|---index.html
		|
		|-----WEB-INF
					|
					|-----web.xml 

Note:
------
In above application we need to add "servlet-api.jar" file in project build path.

index.html
----------

<center>
	<h1>
		<a href="test"> click Here </a>
	</h1>
</center>

web.xml
---------
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" id="WebApp_ID" version="3.0">
  
  <servlet>
  	<servlet-name>TestSrv</servlet-name>
  	<servlet-class>com.ihub.www.TestSrv</servlet-class> 
  	<init-param>
  		<param-name>driver</param-name>
  		<param-value>oracle.jdbc.driver.OracleDriver</param-value>
  	</init-param>
  	<init-param>
  		<param-name>url</param-name>
  		<param-value>jdbc:oracle:thin:@localhost:1521:XE</param-value>
  	</init-param>
  </servlet>
  
  
  <servlet-mapping>
  	<servlet-name>TestSrv</servlet-name>
	<url-pattern>/test</url-pattern>
  </servlet-mapping>
  
  <welcome-file-list>
  	<welcome-file>index.html</welcome-file>
  </welcome-file-list>
  
  
</web-app>

TestSrv.java
-------------
package com.ihub.www;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.Enumeration;

import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class TestSrv extends HttpServlet
{
	protected void doGet(HttpServletRequest req,HttpServletResponse res)throws ServletException,IOException
	{
		PrintWriter pw=res.getWriter();
		res.setContentType("text/html");
		
		ServletConfig config=getServletConfig();
		
		pw.println(config.getInitParameter("driver")+"<br>");
		pw.println(config.getInitParameter("url")+"<br>");
		
		Enumeration<String> e=config.getInitParameterNames();
		while(e.hasMoreElements())
		{
			String s=e.nextElement();
			pw.println(s+"<br>");
		}
		
		pw.println(config.getServletName()+"<br>");
		pw.close();
	}
}

Request url
-----------
	http://localhost:2525/ConfigApp/test


ServletContext object
=====================
ServletContext is an interface which is present in javax.servlet package.

ServletContext object is created by the web container for every web application.

Servletcontext object is used to read configuration information from web.xml file
which is global.

We can create ServletContext object as follow.
ex:
		ServletContext context=getServletContext();

ServletContext contains following methods.


1)public String getInitParameter(String name);
-------------------------------------
	It will return parameter value based on specified parameter name.

2)public Enumeration getInitParameterNames();
-----------------------------------------------------
	It will return enumeration of all initialized parameter names. 




Deployment Directory structure
-------------------------------
ContextApp
|
|----Java Resources
|		|
		|----src
				|
				|----com.ihub.www
							|
							|-----TestSrv.java
|
|----Web Content
		|
		|---index.html
		|
		|-----WEB-INF
					|
					|-----web.xml 

Note:
------
In above application we need to add "servlet-api.jar" file in project build path.


index.html
-----------
<center>
	<h1>
		<a href="test">Click Here </a>
	</h1>
</center>

web.xml
-------
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" id="WebApp_ID" version="3.0">
  
  <welcome-file-list>
  	<welcome-file>index.html</welcome-file>
  </welcome-file-list>
  
  <servlet>
  	<servlet-name>TestSrv</servlet-name>
  	<servlet-class>com.ihub.www.TestSrv</servlet-class>
  </servlet>
  
  <servlet-mapping>
  	<servlet-name>TestSrv</servlet-name>
  	<url-pattern>/test</url-pattern>
  </servlet-mapping>
  
  
  	<context-param>
  		<param-name>driver</param-name>
  		<param-value>oracle.jdbc.driver.OracleDriver</param-value>
  	</context-param>
  	<context-param>
  		<param-name>url</param-name>
  		<param-value>jdbc:oracle:thin:@localhost:1521:XE</param-value>
  	</context-param>
  
  
</web-app>

TestSrv.java
------------
package com.ihub.www;

import java.io.IOException;
import java.io.PrintWriter;
import java.util.Enumeration;

import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class TestSrv extends HttpServlet
{
	protected void doGet(HttpServletRequest req,HttpServletResponse res)throws ServletException,IOException
	{
		PrintWriter pw=res.getWriter();
		res.setContentType("text/html");
		
		ServletContext context=getServletContext();
		
		
		pw.println(context.getInitParameter("driver")+"<br>");
		pw.println(context.getInitParameter("url")+"<br>");
		
		Enumeration<String> e=context.getInitParameterNames();
		while(e.hasMoreElements())
		{
			String s=e.nextElement();
			pw.println(s+"<br>");
		}
	
		
		pw.close();
		
		
	}
}

Request url
----------
	http://localhost:2525/ContextApp