File Uploading
==============
The process of capturing a file from client machine file system and storing in a server 
machine file system is called file uploading and reverse is called file downloading.

While dealing with matrimonial applications,job portal applications and profile management 
applications we need to upload and download a file.

There is no specific API in Servlet to perform file uploading.

We need to take the support of third party API called JAVAZOOM API.

JAVAZOOM API comes in zip format and once if we extract then we will get three jar files.
ex:
	uploadbean.jar (main jar file)

	struts.jar     (dependent jar file)

	cos.jar        (dependent jar file)

We can take file component in a form page as follow.
ex:
	<input type="file" name="f1"/>	


JAVAZOOM API link
=================
https://drive.google.com/file/d/1LB0WSJvSCCVOgz7xNwyuYtmy_0_TfJzq/view?usp=sharing

Deployment Directory structure
===============================
UploadApp
|
|----Java Resources
|	|
	|-----src
		|
		|----com.ihub.www
			|
			|---TestSrv.java
|
|----Web Content
|	|
	|-----form.html
	|
	|-----WEB-INF
		|
		|------web.xml
		|
		|-------lib
			|
			|----uploadbean.jar
			|----struts.jar
			|----cos.jar

Note:
-----
In above application we need to add "servlet-api.jar" and "uploadbean.jar" file in project 
build path.

copy and paste javazoom api jar files inside "WEB-INF/lib" folder seperately.


form.html
---------


<form action="test" method="POST" enctype="multipart/form-data">
	
	File1: <input type="file" name="f1"/> <br>
	
	File2: <input type="file" name="f2"/> <br>
	
	<input type="submit" value="upload"/>

</form>

web.xml
-------
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" id="WebApp_ID" version="3.0">
  
  <servlet>
  	<servlet-name>TestSrv</servlet-name>
  	<servlet-class>com.ihub.www.TestSrv</servlet-class> 
  </servlet>
  <servlet-mapping>
  	<servlet-name>TestSrv</servlet-name>
  	<url-pattern>/test</url-pattern>
  </servlet-mapping>
  
  <welcome-file-list>
  	<welcome-file>form.html</welcome-file>
  </welcome-file-list>
  
</web-app>

TestSrv.java
-------------
package com.ihub.www;

import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import javazoom.upload.MultipartFormDataRequest;
import javazoom.upload.UploadBean;

public class TestSrv extends HttpServlet 
{
	protected void doPost(HttpServletRequest req,HttpServletResponse res)throws ServletException,IOException
	{
		PrintWriter pw=res.getWriter();
		res.setContentType("text/html");
		
		//file uploading
		try
		{
			UploadBean ub=new UploadBean();
			ub.setFolderstore("C:\\B24");
			ub.setOverwrite(false);
			
			MultipartFormDataRequest nreq=new MultipartFormDataRequest(req);
			ub.store(nreq);
			
			pw.println("<center>Files are uploaded successfully</center>");
		}
		catch(Exception e)
		{
			pw.println(e);
		}
		pw.close();
	}
}

Request url
---------
	http://localhost:2525/UploadApp/


Servlet Filters
=================
Filter is an object which is executed at the time of preprocessing and postprocessing of 
the request.

Diagram: servlet6.1

The main purpose of filters are

1) We can count number of request coming to the application 

2) To perform validations.

3) To perform encryption and Decryption.

Like Servlet, Filter is having it's own Filter API.
The javax.servlet package contains thre interfaces of Filter API.

1)Filter 

2)FilterChain

3)FilterConfig 

1)Filter Interface
================
For creating any filter, we must and should implements the Filter interface.

Filter interface provides the following 3 life cycle methods for filter.


i)public void init(FilterConfig config)
----------------------------------
	
	IT is used to initialize the filter.
	It invokes only once .


ii)public void doFilter(HttpServletRequest req,HttpServletResponse res,FilterChain chain)
----------------------------------------------------------
	This method is invoked every time when user request to any resources to which
	the filter is mappend.

	IT is used to perform filtering task.	
	
iii)public void destroy()
---------------------------
	This method is invoked only once when filter is taken out of the service.


2)FilterChain
==============
It is responsible to invoke the next filter or resource in the chain.

FilterChain contains only one method.

i)public void doFilter(HttpServletRequest req,HttpServletResponse res)
------------------------------------
	It passes the control to the next filter or resource.

	
3)FilterConfig
==============
For every filter our servlet container creates FilterConfig object.
It is one per filter.


Deployment Directory structure
-------------------------------
FilterApp
|
|----Java Resources
	|
	|------src
		|
		|----com.ihub.www
			|
			|---MyFilter.java
			|---MyServlet.java 
|
|----Web Content
	|
	|------index.html 
	|
	|------WEB-INF
		|
		|------web.xml
Note:
----
In above application we need to add "servlet-api.jar" file in project build path.

index.html
----------
<center>
	<h1>
		
		<a href="test"> clickMe </a>
	
	</h1>
</center>

web.xml
--------
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" id="WebApp_ID" version="3.0">
  
  <servlet>
  	<servlet-name>MyServlet</servlet-name>
  	<servlet-class>com.ihub.www.MyServlet</servlet-class> 
  </servlet> 
  <servlet-mapping>
  	<servlet-name>MyServlet</servlet-name>
  	<url-pattern>/test</url-pattern>
  </servlet-mapping>
  
  <filter>
  	<filter-name>MyFilter</filter-name>
  	<filter-class>com.ihub.www.MyFilter</filter-class> 
  </filter> 
  <filter-mapping>
  	<filter-name>MyFilter</filter-name>
  	<url-pattern>/test</url-pattern>
  </filter-mapping>
  
  <welcome-file-list>
  	<welcome-file>index.html</welcome-file>
  </welcome-file-list>
  
</web-app>


MyFilter.java
---------------
package com.ihub.www;

import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.Filter;
import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;

public class MyFilter implements Filter
{
	@Override
	public void init(FilterConfig config) throws ServletException {
		// TODO Auto-generated method stub
		
	}
	

	@Override
	public void doFilter(ServletRequest req, ServletResponse res,
			FilterChain chain) throws IOException, ServletException {
		
		PrintWriter pw=res.getWriter();
		res.setContentType("text/html");
		
		pw.println("<center>Filter Invoked Before</center><br>");
		chain.doFilter(req,res);
		pw.println("<center>Filter Invoked After</center><br>");
	}

	
	@Override
	public void destroy() {
		// TODO Auto-generated method stub
		
	}

}

MyServlet.java
-------------
package com.ihub.www;

import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class MyServlet extends HttpServlet 
{
	protected void doGet(HttpServletRequest req,HttpServletResponse res)throws ServletException,IOException
	{
		PrintWriter pw=res.getWriter();
		res.setContentType("text/html");	
		
		pw.println("<center>Servlet Executed</center><br>");
	}
}

Request url
-------------
	http://localhost:2525/FilterApp/test