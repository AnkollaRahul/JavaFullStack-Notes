Example application on HTML based form page to servlet communication
======================================================================
Diagram: servlet4.1

Deployment Directory structure
----------------------------
VoteApp
|
|----Java Resources
	|
	|-------src
		|
		|----com.ihub.www
			|
			|----VoteSrv.java
			
|----Web Content
|	|
	|---form.html
	|
	|----WEB-INF
		|
		|------web.xml
Note:
-----
In above application we need to add "servlet-api.jar" file in project build path.

We can send the request to servlet intwo methodologies.

1) GET Methodology 
---------------
	It will carry limited amount of data.

2) POST methodology 
----------------
	It will carry unlimited amount of data.

While working with HttpServlet class, it is never recommanded to work with
service(-,-) method because it is not designed  according HTTP protocol features.

It is always recommanded to use doXxx(-,-) methods because they have designed 
according HTTP protocol features.

We have seven doXxx(-,-) methods as follow.
ex:
	1) doGet(-,-)
	2) doPost(-,-)
	3) doHead(-,-)
	4) doOption(-,-)
	5) doTrace(-,-)
	6) doDelete(-,-)
	7) doPut(-,-)                 

prototype of doXxx(-,-)
-----------------------
protected void doGet(HttpServletRequest req,HttpServletResponse res)throws ServletException,IOException
{
}

form.html
----------
<form action="test" method="GET">

	Name: <input type="text" name="t1"/> <br>
	
	Age: <input type="text" name="t2"/> <br>
	
	<input type="submit" value="vote"/>
</form>

web.xml
-------
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" id="WebApp_ID" version="3.0">
 
 <servlet>
	<servlet-name>VoteSrv</servlet-name>
	<servlet-class>com.ihub.www.VoteSrv</servlet-class> 
 </servlet>
 <servlet-mapping>
 	<servlet-name>VoteSrv</servlet-name>
 	<url-pattern>/test</url-pattern>
 </servlet-mapping>
 
 <welcome-file-list>
 	<welcome-file>form.html</welcome-file>
 </welcome-file-list> 

</web-app>

VoteSrv.java
------------
package com.ihub.www;

import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class VoteSrv extends HttpServlet 
{
	protected void doGet(HttpServletRequest req,HttpServletResponse res)throws ServletException,IOException
	{
		PrintWriter pw=res.getWriter();
		res.setContentType("text/html");
		
		//reading form data
		String name=req.getParameter("t1");
		String sage=req.getParameter("t2");
		
		//converting string age to int age
		int age=Integer.parseInt(sage);
		
		if(age>=18)
			pw.println("<center><h1 style='color:green'>"+name+" U r eligible to vote</h1></center>");
		else
			pw.println("<center><h1 style='color:red'>"+name+" U r not eligible to vote</h1></center>");
			
		pw.close();
	}
}

request url
----------
	http://localhost:2525/VoteApp/


Q)What is the difference between GET and POST methodology?

GET					POST
---------				-----
It is a default methodology.		It is not a default methodology.

It will carry limited amount of data.	It will carry unlimited amount of data.

It sends the request fastly.		It sends the request bit slow.

It is not suitable for secure data.	It is suitable for secure data.

It is not suitable for encryption and 	It is suitable for encryption and file 
file uplaoding.				uploading.

To process get methodology we will	To process post methodology we will use 
use doGet(-,-) method.			doPost(-,-) method.


Servlet to Database Communication
================================
Diagram: servlet4.2

Deployment Directory structure
-----------------------------
DBApp
|
|---Java Resources 
	|
	|-----src
		|
		|----com.ihub.www
			|
			|----DBSrv.java
|
|---Web Content
	|
	|-----form.html
	|
	|-----WEB-INF
		|
		|-----web.xml
		|
		|------lib
			|
			|---ojdbc14.jar

Note:
-----
In above application we need to "servlet-api.jar" and "ojdbc14.jar" file in project
build path.

Copy and paste "ojdbc14.jar" file in "WEB-INF/lib" folder seperately.