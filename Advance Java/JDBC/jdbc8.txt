Types of ResultSet Objects
===========================
We have two types of ResultSet objects.

1)Non-Scrollable ResultSet object

2)Scrollable ResultSet object 

1)Non-Scrollable ResultSet object
---------------------------------
A ResultSet object which allows us to read the records sequentially, unidirectionally is called non-scrollable ResultSet object.

Bydefault every ResultSet object is a non-scrollable ResultSet object.

If JDBC Statement object is created without type,mode value then ResultSet object is called Non-scrollable ResultSet object.

ex:
	Statement st=con.createStatement();
	ResultSet rs=st.executeQuery("select * from student");


2)Scrollable ResultSet object 
----------------------------
A ResultSet object which allows us to read the records non-sequentially, bidirectionally ,randomly is called scrollable ResultSet object.

If JDBC Statement object is created with type,mode value then ResultSet object is called Non-scrollable ResultSet object.

ex:
	Statement st=con.createStatement(type,mode);
	ResultSet rs=st.executeQuery("select * from student");

Diagram: jdbc8.1

We have two type values.
ex:
	ResultSet.TYPE_SCROLL_SENSITIVE
	ResultSet.TYPE_SCROLL.INSENSITIVE

We have two mode values.
ex:
	ResultSet.CONCUR_READ_ONLY
	ResultSet.CONCUR_UPDATABLE

Various methods present in Scrollable ResultSet object
=====================================================
rs.next()
---------
	It will move the record pointer to next position.

rs.getRow()
---------
	It will return position of record pointer.

rs.getXxx()
-----------
	It will return the values from record ResultSet.

rs.close()
----------
	It is used to close the ResultSet object.

rs.previous()
--------------
	It will move the record pointer to previous position.

rs.first()
----------
	It will set the record pointer to first record.

rs.isFirst()
-------------
	It is used to check record pointer is in first position or not.

rs.last()
---------
	It will set the record pointer to last record.

rs.isLast()
---------
	It is used to check record pointer is in last position or not.

rs.beforeFirst()
-----------------
	It will set the record pointer to BFR position.

rs.afterLast()
--------------
	It will set the record pointer to ALR position.

rs.relative(+/-)
---------------
	It will move the record pointer to next position based on current 
	position.

rs.absolute(+/-)
----------------
	It will move the record pointer to next position based on BFR and ALR.

ex:
---
package com.ihub.www;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;

public class ScrollableResultSetApp {

	public static void main(String[] args)throws Exception  
	{

		Class.forName("oracle.jdbc.driver.OracleDriver");
		Connection con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
		Statement st=con.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,
											ResultSet.CONCUR_READ_ONLY);
		
		String qry="select * from student";
		
		ResultSet rs=st.executeQuery(qry);
		
		//top to bottom
		while(rs.next())
		{
			System.out.println(rs.getRow()+" "+rs.getInt(1)+" "+rs.getString(2)+" "+rs.getString(3));
		}
		
		rs.afterLast();
		while(rs.previous())
		{
			System.out.println(rs.getRow()+" "+rs.getInt(1)+" "+rs.getString(2)+" "+rs.getString(3));
		}
		
		rs.first();
		System.out.println(rs.isFirst());
		System.out.println(rs.getRow()+" "+rs.getInt(1)+" "+rs.getString(2)+" "+rs.getString(3));
		
		rs.last();
		System.out.println(rs.isLast());//true
		System.out.println(rs.getRow()+" "+rs.getInt(1)+" "+rs.getString(2)+" "+rs.getString(3));
		
		//rs.relative(-2);
		rs.absolute(-2);
		System.out.println(rs.getRow()+" "+rs.getInt(1)+" "+rs.getString(2)+" "+rs.getString(3));
		
		rs.close();
		st.close();
		con.close();

	}

}


Batch Processing
=================
Batch processing is used to declare multiple queries in the application and makes a single call to the database.

Each query we need to add in a batch.

To add the query in a batch we need to use addBatch() method Statement object.
ex:
	st.addBatch("select * from student");

To execute the batch we need to use executeBatch() method of Statement object.
ex:
	int[] result=st.executeBatch();

ex:
----
package com.ihub.www;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.Statement;

public class BatchProcessing 
{
	public static void main(String[] args)throws Exception  
	{

		Class.forName("oracle.jdbc.driver.OracleDriver");
		Connection con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
		Statement st=con.createStatement();
		
		String qry1="insert into student values(104,'ramulu','pune')";
		String qry2="delete from student where sno=103";
		String qry3="update student set sname='rani' where sno=101";
		
		//add the queries to batch
		st.addBatch(qry1);
		st.addBatch(qry2);
		st.addBatch(qry3);
		
		//execute the batch
		int[] result=st.executeBatch();
		
		//for each loop
		int sum=0;
		for(int i:result)
		{
			sum+=i;
		}
		System.out.println("No of records effected are ="+sum);
		
		st.close();
		con.close();
	}
}