Type3 JDBC Driver Architecture / Net Protocol 
===============================================
Web server, Proxy server or IDE's server contains JDBC Connection pool representing reusable JDBC Connection objects.

Type3 JDBC driver is not designed to interact with database software directly.

Type3 JDBC driver is designed to interact with web server or proxy server to get one reusable JDBC Connection object from JDBC Connection pool.

Diagram: jdbc5.1

With respect to the diagram: 

1) Webserver or proxy server interacts with database software and gets 
   JDBC Connection objects in JDBC Connection pool.

2) Java application interacts with web server or proxy server and gets 
   one reusable JDBC Connection object from JDBC Connection pool.

3) Our application uses JDBC Connection object to create other connection 
   objects.

4) Once if we call con.close() then JDBC Connection object goes back to 
   JDBC Connection pool.


Q)How many JDBC Connection objects are there in JDBC?

We have two JDBC Connection objects.

1)Direct JDBC Connection object 
-------------------------------
A JDBC Connection object which is created by the user is called direct JDBC Connection object.
ex:
	Class.forName("oracle.jdbc.driver.OracleDriver");
	Connection con=DriverManager.getConnection		("jdbc:oracle:thin:@localhost:1521:XE","system","admin");

2)Pooled JDBC Connection object 
-------------------------------
A JDBC Connection object which is gathered from JDBC Connection pool is called 
pooled JDBC Connection object.

Limitations with simple Statement object
=========================================
> It is not suitable to perform same query for multiple times with same values   or different values.

> We can't use String values directly to query parameter without any   conversion.

> Framing query with variables is quit complex.

> It raises SQL injection problem.

> It does not allow us to insert date values in a database table column.

> It does not allow us to insert LOB values in a database table column.

To overcome this limitations we need to use PreparedStatement object.



Pre-compiled SQL Query
======================
Our query goes to database software without inputs and becomes parsed query
either it is executed or not is called pre-compiled SQL query.

PreparedStatment object deals with pre-compiled SQL query. 



Working with PreparedStatement object
======================================
step1:
-----
	Create a query with placeholders or parameters.
	ex:
		String qry="insert into student values(?,?,?)";

step2:
------
	Convert SQL query to precompiled SQL query.
	ex:
		PreparedStatement ps=con.prepareStatement(qry);

step3:
------
	Set the values to  query parameters.
	ex:
		ps.setInt(1,no);
		ps.setString(2,name);
		ps.setString(3,add);

step4:
------
	Execute pre-compiled SQL Query.
	ex:
		ps.executeUpdate();

step5:
------
	Close PreparedStatement object.
	ex:
		ps.close();

Q)Write a jdbc application to insert a record into student table using PreparedStatement object?

package com.ihub.www;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.util.Scanner;

public class PSInsertApp 
{
	public static void main(String[] args)throws Exception  
	{
		Scanner sc=new Scanner(System.in);
		System.out.println("Enter the student no :");
		int no=sc.nextInt();
		System.out.println("Enter the student name :");
		String name=sc.next();
		System.out.println("Enter the student address :");
		String add=sc.next();
		
		Class.forName("oracle.jdbc.driver.OracleDriver");
		Connection con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
		
		String qry="insert into student values(?,?,?)";
		
		PreparedStatement ps=con.prepareStatement(qry);
		
		//set the values to place holders
		ps.setInt(1,no);
		ps.setString(2,name);
		ps.setString(3,add);
		
		//execute 
		int result=ps.executeUpdate();
		if(result==0)
			System.out.println("Record Not Inserted");
		else
			System.out.println("Record Inserted");
		
		ps.close();
		con.close();
	}
}

Q)Write a jdbc application to update student name based on student number?

package com.ihub.www;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.util.Scanner;

public class PSUpdateApp 
{
	public static void main(String[] args)throws Exception  
	{
		Scanner sc=new Scanner(System.in);
		System.out.println("Enter the student no :");
		int no=sc.nextInt();
		System.out.println("Enter the student name :");
		String name=sc.next();
		
		Class.forName("oracle.jdbc.driver.OracleDriver");
		Connection con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
	
		String qry="update student set sname=? where sno=?";
		
		PreparedStatement ps=con.prepareStatement(qry);
		
		//set the values
		ps.setString(1,name);
		ps.setInt(2,no);
		
		//execute 
		int result=ps.executeUpdate();
		
		if(result==0)
			System.out.println("No Record Updated");
		else
			System.out.println("Record Updated");
		
		ps.close();
		con.close();
	}
}

Q)Write a JDBC Application to delete a student record based on student number?

package com.ihub.www;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.util.Scanner;

public class PSDeleteApp 
{
	public static void main(String[] args)throws Exception  
	{
		Scanner sc=new Scanner(System.in);
		System.out.println("Enter the student no :");
		int no=sc.nextInt();
		
		Class.forName("oracle.jdbc.driver.OracleDriver");
		Connection con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
		
		String qry="delete from student where sno=?";
		
		PreparedStatement ps=con.prepareStatement(qry);
		
		//set the values
		ps.setInt(1,no);
		
		//execute 
		int result=ps.executeUpdate();
		
		if(result==0)
			System.out.println("No Record Deleted");
		else
			System.out.println("Record Deleted");
		
		ps.close();
		con.close();
		
	}
}

Solution for SQL Injection problem
==================================

package com.ihub.www;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.Scanner;

public class SolForSQLInjProb 
{
	public static void main(String[] args)throws Exception  
	{
		Scanner sc=new Scanner(System.in);
		System.out.println("Enter the username :");
		String name=sc.next();
		System.out.println("Enter the password :");
		String pass=sc.next();
		
		Class.forName("oracle.jdbc.driver.OracleDriver");
		Connection con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
		
		String qry="select count(*) from userlist where uname=? and pwd=?";
		
		PreparedStatement ps=con.prepareStatement(qry);
		
		//set the values
		ps.setString(1,name);
		ps.setString(2,pass);
		
		//execute
		ResultSet rs=ps.executeQuery();
		
		int result=0;
		while(rs.next())
		{
			result=rs.getInt(1);
		}
		if(result==0)
			System.out.println("Invalid Credentials ");
		else
			System.out.println("Valid Credentials ");
		
		rs.close();
		ps.close();
		con.close();
	}
}

DatabaseMetaData
==================
DatabaseMetaData is an interface which is present in java.sql package.

DatabaseMetaData provides metadata of a database.

DatabaseMetaData gives information about database product name, database product version, database driver name, database driver version, database username and etc.

We can create DatabaseMetaData object as follow.
ex:
	DatabaseMetaData dbmd=con.getMetaData(); 

ex:
---
package com.ihub.www;

import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.DriverManager;

public class DBMDApp {

	public static void main(String[] args)throws Exception  
	{

		Class.forName("oracle.jdbc.driver.OracleDriver");
		Connection con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
		
		DatabaseMetaData dbmd=con.getMetaData();
		
		System.out.println(dbmd.getDatabaseProductName());
		System.out.println(dbmd.getDatabaseProductVersion());
		System.out.println(dbmd.getDriverName());
		System.out.println(dbmd.getDriverVersion());
		System.out.println(dbmd.getUserName());
		con.close();
			
	}

}

ResultSetMetaData
===================
ResultSetMetaData is an interface which is present in java.sql package.

ResultSetMetaData provides metadata of a table.

ResultSetMetaData gives information about number of columns , name of a columns, type of columns, size of a columns and etc.

We can create ResultSetMetaData object as follow.
ex:
	ResultSetMetaData rsmd=rs.getMetaData();

ex:
---
package com.ihub.www;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.Statement;

public class RSMDApp 
{
	public static void main(String[] args)throws Exception  
	{
		Class.forName("oracle.jdbc.driver.OracleDriver");
		Connection con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
		Statement st=con.createStatement();
		String qry="select * from student";
		ResultSet rs=st.executeQuery(qry);
		
		ResultSetMetaData rsmd=rs.getMetaData();
		
		System.out.println(rsmd.getColumnCount());
		System.out.println(rsmd.getColumnName(1));
		System.out.println(rsmd.getColumnTypeName(2));
		System.out.println(rsmd.getColumnDisplaySize(2));
		
		rs.close();
		st.close();
		con.close();
		
	}
}