JDBC Flexible Application
==========================
In JDBC , Connection object consider as heavy weight object.

It is never recommanded to create JDBC Connection object in every JDBC application.

We need to a create a class which returns JDBC Connection object. 

DBConnection.java
-----------------
package com.ihub.www;

import java.sql.Connection;
import java.sql.DriverManager;

public class DBConnection 
{
	static Connection con=null;
	
	public static Connection getConnection()
	{
		try
		{
			Class.forName("oracle.jdbc.driver.OracleDriver");
			con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		
		return con;
	}
}



FlexibleApp.java
----------------
package com.ihub.www;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;

public class FlexibleApp 
{
	public static void main(String[] args)throws Exception  
	{
		Connection con=DBConnection.getConnection();
		
		Statement st=con.createStatement();
		
		String qry="select * from student";
		
		ResultSet rs=st.executeQuery(qry);
		
		while(rs.next())
		{
			System.out.println(rs.getInt(1)+" "+rs.getString(2)+" "+rs.getString(3));
		}
		
		rs.close();
		st.close();
		con.close();
	}
}

Working with Properties file
============================
In regular intervals, Our DBA will change username and password for security reasons.

It is never recommanded to pass database properties directly to the application.

It is always recommanded to read database properties from properties file.

A properties file contains key and value pair.


dbdetails.properties
--------------------
driver=oracle.jdbc.driver.OracleDriver
url=jdbc:oracle:thin:@localhost:1521:XE
username=system
password=admin

PropertiesApp.java
-----------------
package com.ihub.www;

import java.io.FileInputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.Properties;

public class PropertiesApp 
{
	public static void main(String[] args)throws Exception  
	{
		//locate properties file
		FileInputStream fis=new FileInputStream("src/com/ihub/www/dbdetails.properties");
		
		//create Properties class object
		Properties p=new Properties();
		
		//reading the data from file to class
		p.load(fis);
		
		//reading the data from class
		String s1=p.getProperty("driver");
		String s2=p.getProperty("url");
		String s3=p.getProperty("username");
		String s4=p.getProperty("password");
		
		Class.forName(s1);
		Connection con=DriverManager.getConnection(s2,s3,s4);
		Statement st=con.createStatement();
		String qry="select * from student";
		ResultSet rs=st.executeQuery(qry);
		while(rs.next())
		{
			System.out.println(rs.getInt(1)+" "+rs.getString(2)+" "+rs.getString(3));
		}
		rs.close();
		st.close();
		con.close();
	}
}



Thin-Client/Fat-Server Application
=================================
Every JDBC application consider as Thin-Client/Fat-Server application.

To develop thin-client/fat-server application , we need to save our business logic and presistence logic in database software in the form of PL/SQL procedures and Functions. 

To deal with PL/SQL procedures and functions we need to use CallableStatement object.

Diagram: jdbc7.1


PL/SQL procedure
================
create or replace procedure first_proc(A IN number,B IN number,C OUT number)
IS
BEGIN
C:=A+B;
END;
/


package com.ihub.www;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.Types;

public class CallableStmtApp 
{
	public static void main(String[] args)throws Exception  
	{
		Class.forName("oracle.jdbc.driver.OracleDriver");
		Connection con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
		
		CallableStatement cst=con.prepareCall("{CALL first_proc(?,?,?)}");
		
		//register OUT parameter
		cst.registerOutParameter(3, Types.INTEGER);
		
		//set the values to IN parameter
		cst.setInt(1, 10);
		cst.setInt(2, 20);
		
		//execute 
		cst.execute();
		
		//gather the result 
		int result=cst.getInt(3);
		System.out.println("sum of two numbers is ="+result);
		
		cst.close();
		con.close();
	}
}