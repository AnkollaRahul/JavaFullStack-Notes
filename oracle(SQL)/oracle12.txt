Too see the output in PL/SQL we need to use below command.
ex:
	SQL> set serveroutput  on


2) OUT parameter
================
It will return the output to the user.


Q) Write a procedure to perform sum of two numbers and return sum?

	create or replace procedure ret_sum(A IN number,B IN number,C OUT number)
	is
	begin
	C:=A+B;
	END;
	/

Steps to call a procedure having OUT parameter
-----------------------------------------------
step1:
	Declare a bind variable
	ex:
		variable N number;
step2:
	Execute the procedure 
	ex:
		exec ret_sum(10,20,:N);

step3:
	Print a bind variable 
	ex:
		print N;


3) IN OUT parameter
------------------
It is used to accept and return a value from/to the user.


Q) Write a procedure to return square of a given number?


	create or replace procedure ret_square(A IN OUT number)
	is
	begin
	A := A*A;
	END;
	/

Steps to call a procedure having IN OUT parameter
-------------------------------------------------
step1:
	Declare a bind variable 
	ex:
		variable N number;

step2:
	Initialize the bind variable 
	ex:
		BEGIN
		:N := 5;
		END;
		/

step3:
	Execute the procedure 
	ex:
		exec ret_square(:N);

step4:
	Print a bind variable 
	ex:
		print N;


Q) Write a query to see the list of procedures present in database?

	select object_name from user_objects where object_type='PROCEDURE';


Q) Write a query to see the source code of a procedure?

	select text from user_source where name='P1';


Q) Write a query to drop the procedure?

	drop procedure p1;
	drop procedure ret_sum;
	drop procedure ret_square;





PL/SQL functions
=================
It is a named PL/SQL block which must and should returns a value.

syntax:
	create or replace function <function_name>
	return datatype
	is
	begin
	-
	-
	-
	end;
	/


Q) Write a PL/SQL function to return sum of two numbers?

	create or replace function f1(A number,B number)
	return  number
	is
	C number;
	begin
	C:=A+B;
	return C;
	END;
	/

	To execute the function we need to use below command.
	ex:
		select f1(10,20) from dual;
		select f1(10,20) as SUM from dual;


Q) Write a PL/SQL function to accept one salary then find out 10% of tax?

	create or replace function f2(SAL number)
	return number
	is
	TAX number;
	begin
	TAX := SAL*10/100;
	return TAX;
	END;
	/
	To execute the function we need to use below command.
	ex:
		select f2(10000) from dual;
		select eid,ename,esal,f2(esal) as TAX from emp;

Note:
----
	In Functions DML operations are not allowed.

Q) Write a query to see the list of functions present in database?
	
	select object_name from user_objects where object_type='FUNCTION';


Q) Write a query to see the source code of a function?

	select text from user_source where name='F1';

Q) Write a query to drop the function?

	drop function f1;
	drop function f2;


Q) What is the difference between procedures and functions?

Procedures 					Functions
----------					----------
Procedure may or may not returns a value.	Function always returns a value.

DML operations are allowed.			DML operations are not allowed.

Can't be invoked by using select stmt.		Can be invoked by using select stmt. 



Packages
=========
A package is a collection of logical related sub programs.

PL/SQL procedures and functions are called logical related sub programs.

Package creation involved in two steps.

1) Package specification 
---------------------
	It contains declaration of logical related sub programs.

2) Package body 
--------------
	It contains definition of logical related sub programs.

ex:
---

package specification 
--------------------
create or replace package pkg1 
is
procedure sum(A IN number,B IN number);
end pkg1;
/

	
package body 
------------
create or replace package body pkg1
is
procedure sum(A IN number,B IN number)
is
C number;
begin
C:=A+B;
DBMS_OUTPUT.PUT_LINE(C);
END;
end pkg1;
/

To call the procedure we need to use below command.
ex:
	exec  pkg1.sum(10,40);


ex:
---
package specification 
---------------------
create or replace package pkg2
is
function ret_fun(A number,B number)
return number;
end pkg2;
/

package body
-----------
create or replace package body pkg2
is
function ret_fun(A number,B number)
return number
is
C number;
BEGIN
C:=A+B;
return C;
END;
end pkg2;
/

To call the function we need to use below command.
ex:
	select  pkg2.ret_fun(10,20) from dual;


Q) Write a query to see the list of packages present in database?

	select object_name from user_objects where object_type='PACKAGE';



Q) Write a query to see the source code of a package?

	select text from user_source where name='PKG1';

Q) Write a query to drop the package?

	drop package body pkg1;
	drop package pkg1;

	drop package body pkg2;
	drop package pkg2;	


Triggers
=========
Trigger is a PL/SQL block which is executed based on event.

Insert, Update and Delete are trigger events.

Before, After and Insteadof are the timings of trigger.

syntax:
	create or replace trigger <trigger_name> <timing> <event> ON <object>
	begin
	-
	-
	-
	end;
	/

ex:
---
	create or replace trigger trg1 after insert ON student
	begin
	DBMS_OUTPUT.PUT_LINE('Thank you for inserting !!!!');
	END;
	/

	select * from student;

	insert into student values(103,'ramana','vizag'); // trigger will execute 


Trigger can be created for multiple events also.
ex:
	
	create or replace trigger trg2 before insert OR update OR delete ON student
	begin

	IF inserting THEN
	DBMS_OUTPUT.PUT_LINE('Thank you for inserting!!');
	ELSIF updating THEN 
	DBMS_OUTPUT.PUT_LINE('Thank you for updating!!');
	ELSE
	DBMS_OUTPUT.PUT_LINE('Thank you for deleting!!');
	END IF;

	END;
	/
	select * from student; // no trigger 
	
	insert into student values(104,'ramulu','pune');
	update student set sname='rani' where sno=104;
	delete from student where sno=104;

Triggers are categories into two types.

1) Statement level trigger 
-------------------------
In statement level trigger, trigger will execute only for one time irrespective of number of records effected in a database table.

By default every trigger is a statement level trigger.

ex:
	create or replace trigger trg3 after delete on student
	begin
	DBMS_OUTPUT.PUT_LINE('Deleted!!');
	END;
	/	
	delete from student; // trigger will execute only for one time.

2) Row level trigger 
----------------------
In row level trigger, trigger will execute irrespective of number of records effected in a database table.

To create row level trigger we need to use "FOR EACH ROW" clause.

ex:
	create or replace trigger trg4 after delete on student FOR EACH ROW
	begin
	DBMS_OUTPUT.PUT_LINE('Deleted!!');
	END;
	/	
	delete from student; // trigger will execute here multiple times



Q) Write a query to see the list of triggers present in database?

	select object_name from user_objects where object_type='TRIGGER';


Q) Write a query to see the source code of a trigger?

	select text from user_source where name='TRG4';


Q) Write a query to drop the trigger from database?

	drop trigger trg1;
	drop trigger trg2;
	drop trigger trg3;
	drop trigger trg4;